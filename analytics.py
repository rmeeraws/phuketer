import json
import os
from datetime import datetime, date
from typing import Dict, Any

class BotAnalytics:
    """
    –ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ JSON —Ñ–∞–π–ª.
    """
    
    def __init__(self, stats_file: str = "bot_stats.json"):
        self.stats_file = stats_file
        self.stats = self._load_stats()
    
    def _load_stats(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.stats_file):
            try:
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except (json.JSONDecodeError, FileNotFoundError):
                pass
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        return {
            "total_users": 0,
            "total_messages": 0,
            "total_voice_messages": 0,
            "total_searches": 0,
            "users": {},
            "daily_stats": {},
            "start_date": datetime.now().isoformat()
        }
    
    def _save_stats(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ñ–∞–π–ª"""
        try:
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(self.stats, f, ensure_ascii=False, indent=2)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def track_user_message(self, user_id: int, username: str = "Unknown", is_voice: bool = False):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        today = date.today().isoformat()
        user_key = str(user_id)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats["total_messages"] += 1
        if is_voice:
            self.stats["total_voice_messages"] += 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_key not in self.stats["users"]:
            self.stats["total_users"] += 1
            self.stats["users"][user_key] = {
                "username": username,
                "first_seen": datetime.now().isoformat(),
                "messages_count": 0,
                "voice_messages_count": 0,
                "searches_triggered": 0
            }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = self.stats["users"][user_key]
        user_stats["messages_count"] += 1
        user_stats["last_seen"] = datetime.now().isoformat()
        if username:
            user_stats["username"] = username
        if is_voice:
            user_stats["voice_messages_count"] += 1
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if today not in self.stats["daily_stats"]:
            self.stats["daily_stats"][today] = {
                "messages": 0,
                "voice_messages": 0,
                "unique_users": [],
                "searches": 0
            }
        
        daily = self.stats["daily_stats"][today]
        daily["messages"] += 1
        if is_voice:
            daily["voice_messages"] += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
        if user_id not in daily["unique_users"]:
            daily["unique_users"].append(user_id)
        
        daily["unique_users_count"] = len(daily["unique_users"])
        
        self._save_stats()
    
    def track_search(self, user_id: int, search_query: str):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
        today = date.today().isoformat()
        user_key = str(user_id)
        
        self.stats["total_searches"] += 1
        
        if user_key in self.stats["users"]:
            self.stats["users"][user_key]["searches_triggered"] += 1
        
        if today in self.stats["daily_stats"]:
            self.stats["daily_stats"][today]["searches"] += 1
        
        self._save_stats()
    
    def get_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        today = date.today().isoformat()
        daily_today = self.stats["daily_stats"].get(today, {})
        
        summary = f"""üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ –†–∞–≤—à–∞–Ω:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {self.stats['total_users']}
üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['total_messages']}
üé§ –ì–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['total_voice_messages']}
üîç –ü–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {self.stats['total_searches']}

üìÖ –°–µ–≥–æ–¥–Ω—è ({today}):
üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: {daily_today.get('messages', 0)}
üë• –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {daily_today.get('unique_users_count', 0)}
üîç –ü–æ–∏—Å–∫–æ–≤: {daily_today.get('searches', 0)}
"""
        return summary
    
    def get_top_users(self, limit: int = 10) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        users = []
        for user_id, data in self.stats["users"].items():
            users.append({
                "username": data.get("username", "Unknown"),
                "messages": data["messages_count"],
                "voice": data["voice_messages_count"],
                "searches": data["searches_triggered"]
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–æ–æ–±—â–µ–Ω–∏–π
        users.sort(key=lambda x: x["messages"], reverse=True)
        
        result = f"üèÜ –¢–æ–ø {min(limit, len(users))} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for i, user in enumerate(users[:limit], 1):
            result += f"{i}. @{user['username']}: {user['messages']} —Å–æ–æ–±—â–µ–Ω–∏–π ({user['voice']} –≥–æ–ª–æ—Å–æ–≤—ã—Ö, {user['searches']} –ø–æ–∏—Å–∫–æ–≤)\n"
        
        return result
import asyncio
import logging
import os
import re
from inspect import iscoroutinefunction
import contextlib
import aiohttp  # <-- –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è heartbeat

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters.command import CommandStart
from aiogram.enums.chat_action import ChatAction
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime
try:
    from zoneinfo import ZoneInfo  # py>=3.9
except Exception:
    ZoneInfo = None

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM
from llm_manager import LLMManager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å –∫–ª—é—á–∞–º–∏
from config import TELEGRAM_BOT_TOKEN

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
from analytics import BotAnalytics

# ---- –ù–û–í–û–ï: —á–∏—Ç–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è heartbeat ----
HEALTHCHECKS_PING_URL = os.getenv("HEALTHCHECKS_PING_URL", "").strip()
HEARTBEAT_INTERVAL_SEC = int(os.getenv("HEARTBEAT_INTERVAL_SEC", "300"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
if not TELEGRAM_BOT_TOKEN:
    logging.error("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")
    exit()

bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—à–µ–≥–æ LLM –º–µ–Ω–µ–¥–∂–µ—Ä–∞
llm_manager = LLMManager()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
analytics = BotAnalytics()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + —á–∞—Ç–∞
user_history = {}

# --- helpers –¥–ª—è send_long_message ---

MD_HEADER_RE = re.compile(r'^\s*#{1,6}\s*', flags=re.MULTILINE)
ANCHOR_RE = re.compile(r'<a\s+href="([^"]+)">(.*?)</a>', flags=re.IGNORECASE | re.DOTALL)

def strip_markdown_headers(text: str) -> str:
    """–£–±–∏—Ä–∞–µ–º markdown-–∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤–∏–¥–∞ '# –ó–∞–≥–æ–ª–æ–≤–æ–∫' –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫."""
    return MD_HEADER_RE.sub('', text)

def html_to_plain(text: str) -> str:
    """
    –ü—Ä–æ—Å—Ç–æ–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ñ–æ–ª–±—ç–∫:
    - <a href="URL">label</a> -> 'label (URL)'
    - <br> -> '\n'
    - –ø—Ä–æ—á–∏–µ —Ç–µ–≥–∏ —É–±–∏—Ä–∞–µ–º
    """
    text = ANCHOR_RE.sub(lambda m: f"{m.group(2)} ({m.group(1)})", text)
    text = re.sub(r'<br\s*/?>', '\n', text, flags=re.IGNORECASE)
    text = re.sub(r'</p\s*>', '\n\n', text, flags=re.IGNORECASE)
    text = re.sub(r'<p\s*>', '', text, flags=re.IGNORECASE)
    text = re.sub(r'</?(?:b|i|u|em|strong|span|code|pre|blockquote|tt)>', '', text, flags=re.IGNORECASE)
    text = re.sub(r'</?[^>]+>', '', text)
    text = re.sub(r'\n{3,}', '\n\n', text).strip()
    return text

def split_safely(text: str, max_length: int) -> list[str]:
    """
    –î–µ–ª–∏–º —Ç–µ–∫—Å—Ç –Ω–∞ –∫—É—Å–∫–∏ <= max_length, —Å—Ç–∞—Ä–∞—è—Å—å —Ä–µ–∑–∞—Ç—å –ø–æ –∞–±–∑–∞—Ü–∞–º/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º.
    """
    if len(text) <= max_length:
        return [text]

    parts = []
    current = ""

    paragraphs = text.split('\n')
    for paragraph in paragraphs:
        if len(paragraph) > max_length:
            sentences = re.split(r'(?<=[\.\!\?])\s+', paragraph)
            for sent in sentences:
                if not sent:
                    continue
                while len(sent) > max_length:
                    if current:
                        parts.append(current)
                        current = ""
                    parts.append(sent[:max_length])
                    sent = sent[max_length:]
                if len(current) + len(sent) + 1 > max_length:
                    if current:
                        parts.append(current)
                    current = sent
                else:
                    current = (current + ' ' + sent).strip()
        else:
            addition = ('\n' + paragraph) if current else paragraph
            if len(current) + len(addition) > max_length:
                if current:
                    parts.append(current)
                current = paragraph
            else:
                current += addition

    if current:
        parts.append(current)

    return parts

# --- –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π send_long_message ---

async def send_long_message(message: types.Message, text: str, max_length: int = 4000):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ä–∞–∑–±–∏–≤–∞—è –µ–≥–æ –Ω–∞ —á–∞—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è—è HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    –§–æ–ª–±—ç–∫: –µ—Å–ª–∏ Telegram —Ä—É–≥–∞–µ—Ç—Å—è –Ω–∞ HTML, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ plain text —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Å—ã–ª–æ–∫.
    """
    text = strip_markdown_headers(text)
    parts = split_safely(text, max_length)

    for i, part in enumerate(parts):
        out = part
        if i > 0:
            out = f"...–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ:\n{out}"
        if i < len(parts) - 1:
            out += "\n\nüìÑ <i>–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É–µ—Ç...</i>"

        try:
            await message.reply(out, parse_mode='HTML')
        except TelegramBadRequest:
            plain = html_to_plain(out)
            await message.reply(plain)

# --- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ö–µ–ª–ø–µ—Ä –¥–ª—è LLM-–≤—ã–∑–æ–≤–∞ ---

async def fetch_llm_response(messages, model_name: str, user_id: int) -> str | None:
    fn = llm_manager.get_response
    if iscoroutinefunction(fn):
        return await fn(messages, model_name=model_name, user_id=user_id)
    else:
        return await asyncio.to_thread(fn, messages, model_name=model_name, user_id=user_id)

# --- –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ---

async def progress_notifier(bot: Bot, chat_id: int, message_id: int, stop_event: asyncio.Event):
    """
    –ê–Ω–∏–º–∞—Ü–∏—è: '–û–∫–µ–π-–∫–∞–ø‚è≥', '–û–∫–µ–π-–∫–∞–ø..‚åõÔ∏è', '–û–∫–µ–π-–∫–∞–ø...‚è≥'
    """
    frames = ["–û–∫–µ–π-–∫–∞–ø‚è≥", "–û–∫–µ–π-–∫–∞–ø..‚åõÔ∏è", "–û–∫–µ–π-–∫–∞–ø...‚è≥"]
    idx = 0
    try:
        while not stop_event.is_set():
            try:
                await bot.edit_message_text(frames[idx % len(frames)], chat_id, message_id, parse_mode='HTML')
            except Exception:
                pass
            idx += 1
            await asyncio.sleep(1)  # —à–∞–≥ –∞–Ω–∏–º–∞—Ü–∏–∏
    except Exception as e:
        logging.error(f"progress_notifier error: {e}")

# --- Healthcheck heartbeat (–ù–û–í–û–ï) ---

async def heartbeat_task():
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø–∏–Ω–≥—É–µ—Ç Healthchecks.
    –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å —É–ø–∞–¥—ë—Ç –∏–ª–∏ Replit –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç workflow ‚Äî –ø–∏–Ω–≥–∏ –ø—Ä–µ–∫—Ä–∞—Ç—è—Ç—Å—è,
    –∏ Healthchecks –ø—Ä–∏—à–ª—ë—Ç –∞–ª–µ—Ä—Ç –≤ Telegram.
    """
    if not HEALTHCHECKS_PING_URL:
        logging.info("heartbeat: HEALTHCHECKS_PING_URL is empty, skipping.")
        return

    timeout = aiohttp.ClientTimeout(total=10)
    async with aiohttp.ClientSession(timeout=timeout) as session:
        # –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç-–ø–∏–Ω–≥ (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω, –Ω–æ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
        with contextlib.suppress(Exception):
            await session.get(f"{HEALTHCHECKS_PING_URL}/start")

        while True:
            try:
                await session.get(HEALTHCHECKS_PING_URL)
                logging.debug("heartbeat: ping ok")
            except Exception as e:
                # –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–∏–Ω–≥–æ–≤ ‚Äî –∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª –¥–ª—è –∞–ª–µ—Ä—Ç–∞, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                logging.warning(f"heartbeat: ping failed: {e}")
            await asyncio.sleep(HEARTBEAT_INTERVAL_SEC)

# --- –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

def phuket_now_str() -> str:
    """–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ (UTC+7) –≤ —É–¥–æ–±–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ."""
    if ZoneInfo:
        now = datetime.now(ZoneInfo("Asia/Bangkok"))  # –ü—Ö—É–∫–µ—Ç = –ê–∑–∏—è/–ë–∞–Ω–≥–∫–æ–∫
    else:
        # –§–æ–ª–±—ç–∫: –±–µ—Ä—ë–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ UTC –∏ –ø—Ä–∏–±–∞–≤–ª—è–µ–º 7 —á–∞—Å–æ–≤
        now = datetime.utcnow() + timedelta(hours=7)
    return now.strftime("%d.%m.%Y ‚Ä¢ %H:%M (UTC+7)")

@dp.message(lambda m: m.text and m.text.strip().lower() in {"/time", "time", "–≤—Ä–µ–º—è"})
async def time_command(message: types.Message):
    await message.reply(f"–°–µ–π—á–∞—Å –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ: <b>{phuket_now_str()}</b>", parse_mode="HTML")

# –ü–µ—Ä–µ—Ö–≤–∞—Ç –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: "—Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏", "–∫–∞–∫–æ–µ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è", "time in Phuket" –∏ —Ç.–ø.
TIME_PAT = re.compile(
    r"(—Å–∫–æ–ª(—å|—ä)–∫–æ.*–≤—Ä–µ–º|–∫–∞–∫–æ(–µ|–π).*–≤—Ä–µ–º|—Å–µ–π—á–∞—Å.*–≤—Ä–µ–º|time.*phuket|current.*time.*phuket|–≤—Ä–µ–º—è.*–ø—Ö—É–∫–µ—Ç)",
    re.IGNORECASE
)

@dp.message(lambda m: m.text and TIME_PAT.search(m.text))
async def handle_time_question(message: types.Message):
    # –û—Ç–≤–µ—á–∞–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ –∏ –Ω–µ –∑–æ–≤—ë–º –º–æ–¥–µ–ª—å
    await message.reply(f"–°–µ–π—á–∞—Å –Ω–∞ –ü—Ö—É–∫–µ—Ç–µ: <b>{phuket_now_str()}</b>", parse_mode="HTML")

@dp.message(CommandStart())
async def send_welcome(message: types.Message):
    if message.from_user and message.chat:
        chat_key = f"{message.from_user.id}_{message.chat.id}"
        user_history[chat_key] = []
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n"
        "–Ø —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–µ–π—Ä–æ-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ü—Ö—É–∫–µ—Ç—É! üèùÔ∏è\n\n"
        "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å:\n"
        "üìç –ü–æ–∏—Å–∫–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç (–ø–ª—è–∂–∏, —Ö—Ä–∞–º—ã, –∫–∞—Ñ–µ)\n"
        "üíé –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ –ø–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞–º –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è–º\n"
        "üöó –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏ (—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –∞—Ä–µ–Ω–¥–∞, –æ–±–º–µ–Ω –≤–∞–ª—é—Ç—ã)\n"
        "üó∫Ô∏è –ò –º–Ω–æ–≥–∏–º –¥—Ä—É–≥–∏–º!\n\n"
        "–ü—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ —á—ë–º-–Ω–∏–±—É–¥—å, —Å–≤—è–∑–∞–Ω–Ω—ã–º —Å –ü—Ö—É–∫–µ—Ç–æ–º! üòâ\n\n"
        "<i>–ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞:</i>\n"
        "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "/topusers - —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )

@dp.message(lambda message: message.text and message.text.startswith('/stats'))
async def send_stats(message: types.Message):
    if message.from_user:
        stats_summary = analytics.get_summary()
        await message.reply(stats_summary, parse_mode='HTML')

@dp.message(lambda message: message.text and message.text.startswith('/topusers'))
async def send_top_users(message: types.Message):
    if message.from_user:
        top_users = analytics.get_top_users(10)
        await message.reply(top_users, parse_mode='HTML')

@dp.message(F.voice)
async def handle_voice_message(message: types.Message):
    if not message.from_user or not message.voice:
        return

    user_id = message.from_user.id
    username = message.from_user.username or "Unknown"
    chat_key = f"{user_id}_{message.chat.id}"

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} –≤ —á–∞—Ç–µ {message.chat.id}")

    analytics.track_user_message(user_id, username, is_voice=True)

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä
    progress_msg = await bot.send_message(message.chat.id, "–û–∫–µ–π-–∫–∞–ø‚è≥", parse_mode='HTML')
    stop_event = asyncio.Event()
    progress_task = asyncio.create_task(progress_notifier(bot, message.chat.id, progress_msg.message_id, stop_event))

    try:
        if chat_key not in user_history:
            user_history[chat_key] = []

        voice_file = await bot.get_file(message.voice.file_id)
        if not voice_file.file_path:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
            return

        audio_filename = f"voice_{message.from_user.id}.ogg"
        await bot.download_file(voice_file.file_path, audio_filename)

        recognized_text = llm_manager.transcribe_audio(audio_filename)
        os.remove(audio_filename)

        if not recognized_text:
            await message.reply("–ò–∑–≤–∏–Ω–∏, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–≤–æ—é —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑.")
            return

        user_history[chat_key].append({"role": "user", "content": recognized_text})

        response_text = await fetch_llm_response(
            user_history[chat_key],
            model_name="deepseek",
            user_id=user_id
        )

        if response_text:
            user_history[chat_key].append({"role": "assistant", "content": response_text})
            await send_long_message(message, response_text)
        else:
            await progress_msg.edit_text("üôà –ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {response_text}")

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.reply("–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    finally:
        stop_event.set()
        await progress_task
        try:
            await bot.delete_message(message.chat.id, progress_msg.message_id)
        except Exception:
            try:
                await progress_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ")
            except Exception:
                pass

@dp.message()
async def handle_text_message(message: types.Message):
    if not message.from_user or not message.text:
        return

    user_id = message.from_user.id
    user_text = message.text
    username = message.from_user.username or "Unknown"
    chat_key = f"{user_id}_{message.chat.id}"

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {username} –≤ —á–∞—Ç–µ {message.chat.id}: {user_text}")

    analytics.track_user_message(user_id, username, is_voice=False)

    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä
    progress_msg = await bot.send_message(message.chat.id, "–û–∫–µ–π-–∫–∞–ø‚è≥", parse_mode='HTML')
    stop_event = asyncio.Event()
    progress_task = asyncio.create_task(progress_notifier(bot, message.chat.id, progress_msg.message_id, stop_event))

    try:
        if chat_key not in user_history:
            user_history[chat_key] = []

        user_history[chat_key].append({"role": "user", "content": user_text})

        response_text = await fetch_llm_response(
            user_history[chat_key],
            model_name="deepseek",
            user_id=user_id
        )

        if response_text:
            user_history[chat_key].append({"role": "assistant", "content": response_text})
            await send_long_message(message, response_text)
        else:
            await progress_msg.edit_text("üôà –ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç: {response_text}")

    except Exception as e:
        logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await message.reply("–ò–∑–≤–∏–Ω–∏, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–æ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.")
    finally:
        stop_event.set()
        await progress_task
        try:
            await bot.delete_message(message.chat.id, progress_msg.message_id)
        except Exception:
            try:
                await progress_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ")
            except Exception:
                pass

async def main():
    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—É—Å–∫ heartbeat (–µ—Å–ª–∏ URL –∑–∞–¥–∞–Ω)
    hb_task = None
    try:
        if HEALTHCHECKS_PING_URL:
            hb_task = asyncio.create_task(heartbeat_task())
            logging.info("heartbeat: started (%ss)", HEARTBEAT_INTERVAL_SEC)

        await bot.delete_webhook(drop_pending_updates=True)
        logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        await dp.start_polling(bot)
    finally:
        if hb_task:
            hb_task.cancel()
            with contextlib.suppress(Exception):
                await hb_task
        logging.info("Bot shutdown complete.")

if __name__ == "__main__":
    asyncio.run(main())
